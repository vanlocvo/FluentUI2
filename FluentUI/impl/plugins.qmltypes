import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by qmltyperegistrar.

Module {
    Component {
        file: "ControlBackgroundImpl.h"
        name: "ControlBackgroundImpl"
        accessSemantics: "reference"
        prototype: "QQuickPaintedItem"
        exports: ["FluentUI.impl/ControlBackgroundImpl 1.0"]
        exportMetaObjectRevisions: [256]
        Property { name: "radius"; type: "int"; notify: "radiusChanged"; index: 0 }
        Property { name: "defaultColor"; type: "QColor"; notify: "defaultColorChanged"; index: 1 }
        Property { name: "secondaryColor"; type: "QColor"; notify: "secondaryColorChanged"; index: 2 }
        Property { name: "endColor"; type: "QColor"; notify: "endColorChanged"; index: 3 }
        Property { name: "borderWidth"; type: "int"; notify: "borderWidthChanged"; index: 4 }
        Signal { name: "radiusChanged" }
        Signal { name: "defaultColorChanged" }
        Signal { name: "secondaryColorChanged" }
        Signal { name: "endColorChanged" }
        Signal { name: "borderWidthChanged" }
    }
    Component {
        file: "DataGridModel.h"
        name: "DataGridModel"
        accessSemantics: "reference"
        prototype: "QAbstractListModel"
        exports: ["FluentUI.impl/DataGridModel 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "count"
            type: "int"
            read: "count"
            notify: "countChanged"
            index: 0
            isReadonly: true
        }
        Property {
            name: "sourceData"
            type: "QVariant"
            isList: true
            notify: "sourceDataChanged"
            index: 1
        }
        Signal { name: "sourceDataChanged" }
        Signal { name: "countChanged" }
        Method { name: "clear" }
        Method {
            name: "append"
            Parameter { name: "data"; type: "QJSValue" }
        }
        Method {
            name: "get"
            type: "QVariant"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "move"
            type: "bool"
            Parameter { name: "from"; type: "int" }
            Parameter { name: "to"; type: "int" }
            Parameter { name: "n"; type: "int" }
        }
        Method {
            name: "remove"
            type: "bool"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "count"; type: "int" }
        }
        Method {
            name: "remove"
            type: "bool"
            isCloned: true
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "insert"
            type: "bool"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "data"; type: "QJSValue" }
        }
        Method {
            name: "set"
            type: "bool"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "data"; type: "QJSValue" }
        }
        Method {
            name: "removeItems"
            Parameter { name: "list"; type: "QModelIndexList" }
        }
        Method {
            name: "selectRange"
            Parameter { name: "selectionModel"; type: "QItemSelectionModel"; isPointer: true }
            Parameter { name: "startRow"; type: "int" }
            Parameter { name: "endRow"; type: "int" }
        }
    }
    Component {
        file: "def.h"
        name: "DatePickerType"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["FluentUI.impl/DatePickerType 1.0"]
        exportMetaObjectRevisions: [256]
        Enum {
            name: "DatePickerField"
            isFlag: true
            values: ["Day", "Month", "Year"]
        }
    }
    Component {
        file: "DesktopCaptureItem.h"
        name: "DesktopCaptureItem"
        accessSemantics: "reference"
        prototype: "QQuickPaintedItem"
        exports: ["FluentUI.impl/DesktopCaptureItem 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "desktop"
            type: "QImage"
            read: "desktop"
            notify: "desktopChanged"
            index: 0
            isReadonly: true
            isFinal: true
        }
        Property {
            name: "target"
            type: "QImage"
            read: "target"
            notify: "targetChanged"
            index: 1
            isReadonly: true
            isFinal: true
        }
        Property {
            name: "position"
            type: "QPoint"
            read: "position"
            notify: "positionChanged"
            index: 2
            isReadonly: true
            isFinal: true
        }
        Property {
            name: "color"
            type: "QColor"
            read: "color"
            notify: "colorChanged"
            index: 3
            isReadonly: true
            isFinal: true
        }
        Signal { name: "desktopChanged" }
        Signal { name: "targetChanged" }
        Signal { name: "positionChanged" }
        Signal { name: "colorChanged" }
        Method { name: "capture" }
    }
    Component {
        file: "FileWatcher.h"
        name: "FileWatcher"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["FluentUI.impl/FileWatcher 1.0"]
        exportMetaObjectRevisions: [256]
        Property { name: "path"; type: "QString"; notify: "pathChanged"; index: 0 }
        Signal { name: "pathChanged" }
        Signal { name: "fileChanged" }
    }
    Component {
        file: "FluentUI.h"
        name: "FluentUI"
        accessSemantics: "reference"
        prototype: "QQuickAttachedPropertyPropagator"
        exports: ["FluentUI.impl/FluentUI 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Enum {
            name: "DarkModes"
            alias: "DarkMode"
            isFlag: true
            values: ["Light", "Dark", "System"]
        }
        Property { name: "radius"; type: "int"; notify: "radiusChanged"; index: 0 }
        Property {
            name: "highlightMoveDuration"
            type: "int"
            notify: "highlightMoveDurationChanged"
            index: 1
        }
        Property { name: "theme"; type: "QVariant"; notify: "themeChanged"; index: 2 }
        Property { name: "textColor"; type: "QColor"; notify: "textColorChanged"; index: 3 }
        Property { name: "minimumHeight"; type: "int"; notify: "minimumHeightChanged"; index: 4 }
        Property {
            name: "dark"
            type: "bool"
            read: "dark"
            write: "setDark"
            reset: "resetDark"
            notify: "darkChanged"
            index: 5
            isFinal: true
        }
        Property {
            name: "primaryColor"
            type: "QVariant"
            read: "primaryColor"
            write: "setPrimaryColor"
            reset: "resetPrimaryColor"
            notify: "primaryColorChanged"
            index: 6
            isFinal: true
        }
        Signal { name: "radiusChanged" }
        Signal { name: "highlightMoveDurationChanged" }
        Signal { name: "themeChanged" }
        Signal { name: "textColorChanged" }
        Signal { name: "minimumHeightChanged" }
        Signal { name: "darkChanged" }
        Signal { name: "primaryColorChanged" }
    }
    Component {
        file: "Frameless.h"
        name: "Frameless"
        accessSemantics: "reference"
        defaultProperty: "data"
        parentProperty: "parent"
        prototype: "QQuickItem"
        exports: ["FluentUI.impl/Frameless 1.0"]
        exportMetaObjectRevisions: [256]
        Property { name: "appbar"; type: "QQuickItem"; isPointer: true; notify: "appbarChanged"; index: 0 }
        Property {
            name: "buttonMaximized"
            type: "QQuickItem"
            isPointer: true
            notify: "buttonMaximizedChanged"
            index: 1
        }
        Property { name: "topmost"; type: "bool"; notify: "topmostChanged"; index: 2 }
        Property { name: "disabled"; type: "bool"; notify: "disabledChanged"; index: 3 }
        Property { name: "fixSize"; type: "bool"; notify: "fixSizeChanged"; index: 4 }
        Property { name: "dark"; type: "bool"; notify: "darkChanged"; index: 5 }
        Property { name: "windowEffect"; type: "int"; notify: "windowEffectChanged"; index: 6 }
        Signal { name: "appbarChanged" }
        Signal { name: "buttonMaximizedChanged" }
        Signal { name: "topmostChanged" }
        Signal { name: "disabledChanged" }
        Signal { name: "fixSizeChanged" }
        Signal { name: "darkChanged" }
        Signal { name: "windowEffectChanged" }
        Method { name: "showFullScreen" }
        Method { name: "showMaximized" }
        Method { name: "showMinimized" }
        Method { name: "showNormal" }
        Method {
            name: "setHitTestVisible"
            Parameter { type: "QQuickItem"; isPointer: true }
        }
        Method { name: "onDestruction" }
    }
    Component {
        file: "ImageItem.h"
        name: "ImageItem"
        accessSemantics: "reference"
        prototype: "QQuickPaintedItem"
        exports: ["FluentUI.impl/ImageItem 1.0"]
        exportMetaObjectRevisions: [256]
        Property { name: "source"; type: "QImage"; notify: "sourceChanged"; index: 0 }
        Signal { name: "sourceChanged" }
    }
    Component {
        file: "def.h"
        name: "InfoBarType"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["FluentUI.impl/InfoBarType 1.0"]
        exportMetaObjectRevisions: [256]
        Enum {
            name: "Severity"
            isFlag: true
            values: ["Info", "Warning", "Error", "Success"]
        }
    }
    Component {
        file: "InputBackgroundImpl.h"
        name: "InputBackgroundImpl"
        accessSemantics: "reference"
        prototype: "QQuickPaintedItem"
        exports: ["FluentUI.impl/InputBackgroundImpl 1.0"]
        exportMetaObjectRevisions: [256]
        Property { name: "targetActiveFocus"; type: "bool"; notify: "targetActiveFocusChanged"; index: 0 }
        Property { name: "radius"; type: "int"; notify: "radiusChanged"; index: 1 }
        Property { name: "offsetY"; type: "int"; notify: "offsetYChanged"; index: 2 }
        Property { name: "endColor"; type: "QColor"; notify: "endColorChanged"; index: 3 }
        Property { name: "defaultColor"; type: "QColor"; notify: "defaultColorChanged"; index: 4 }
        Property { name: "borderWidth"; type: "int"; notify: "borderWidthChanged"; index: 5 }
        Property { name: "gradientHeight"; type: "int"; notify: "gradientHeightChanged"; index: 6 }
        Signal { name: "targetActiveFocusChanged" }
        Signal { name: "radiusChanged" }
        Signal { name: "offsetYChanged" }
        Signal { name: "endColorChanged" }
        Signal { name: "defaultColorChanged" }
        Signal { name: "borderWidthChanged" }
        Signal { name: "gradientHeightChanged" }
    }
    Component {
        file: "LineNumberModel.h"
        name: "LineNumberModel"
        accessSemantics: "reference"
        prototype: "QAbstractListModel"
        exports: ["FluentUI.impl/LineNumberModel 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "lineCount"
            type: "int"
            read: "lineCount"
            write: "setLineCount"
            notify: "lineCountChanged"
            index: 0
        }
        Signal { name: "lineCountChanged" }
        Method {
            name: "currentLineNumber"
            type: "int"
            Parameter { name: "textDocument"; type: "QQuickTextDocument"; isPointer: true }
            Parameter { name: "cursorPosition"; type: "int" }
        }
    }
    Component {
        file: "def.h"
        name: "NavigationViewType"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["FluentUI.impl/NavigationViewType 1.0"]
        exportMetaObjectRevisions: [256]
        Enum {
            name: "DisplayModes"
            alias: "DisplayMode"
            isFlag: true
            values: ["Open", "Compact", "Minimal", "Auto", "Top"]
        }
    }
    Component {
        file: "def.h"
        name: "NumberBoxType"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["FluentUI.impl/NumberBoxType 1.0"]
        exportMetaObjectRevisions: [256]
        Enum {
            name: "PlacementMode"
            isFlag: true
            values: ["Inline", "Compact"]
        }
    }
    Component {
        file: "qquickattachedpropertypropagator.h"
        name: "QQuickAttachedPropertyPropagator"
        accessSemantics: "reference"
        prototype: "QObject"
    }
    Component {
        file: "QRCodeImpl.h"
        name: "QRCodeImpl"
        accessSemantics: "reference"
        prototype: "QQuickPaintedItem"
        exports: ["FluentUI.impl/QRCodeImpl 1.0"]
        exportMetaObjectRevisions: [256]
        Property { name: "text"; type: "QString"; notify: "textChanged"; index: 0 }
        Property { name: "color"; type: "QColor"; notify: "colorChanged"; index: 1 }
        Property { name: "backgroundColor"; type: "QColor"; notify: "backgroundColorChanged"; index: 2 }
        Property { name: "size"; type: "int"; notify: "sizeChanged"; index: 3 }
        Signal { name: "textChanged" }
        Signal { name: "colorChanged" }
        Signal { name: "backgroundColorChanged" }
        Signal { name: "sizeChanged" }
    }
    Component {
        file: "qsyntaxhighlighter.h"
        name: "QSyntaxHighlighter"
        accessSemantics: "reference"
        prototype: "QObject"
        Method { name: "rehighlight" }
        Method {
            name: "rehighlightBlock"
            Parameter { name: "block"; type: "QTextBlock" }
        }
        Method {
            name: "_q_reformatBlocks"
            Parameter { name: "from"; type: "int" }
            Parameter { name: "charsRemoved"; type: "int" }
            Parameter { name: "charsAdded"; type: "int" }
        }
        Method { name: "_q_delayedRehighlight" }
    }
    Component {
        file: "Resource.h"
        name: "Resource"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["FluentUI.impl/R 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [256]
        Property { name: "windowIcon"; type: "QUrl"; notify: "windowIconChanged"; index: 0 }
        Property {
            name: "systemDark"
            type: "bool"
            read: "systemDark"
            notify: "systemDarkChanged"
            index: 1
            isReadonly: true
            isFinal: true
        }
        Signal { name: "windowIconChanged" }
        Signal { name: "systemDarkChanged" }
        Method {
            name: "resolvedUrl"
            type: "QString"
            Parameter { name: "path"; type: "QString" }
        }
    }
    Component {
        file: "RoundRectangle.h"
        name: "RoundRectangle"
        accessSemantics: "reference"
        prototype: "QQuickPaintedItem"
        exports: ["FluentUI.impl/RoundRectangle 1.0"]
        exportMetaObjectRevisions: [256]
        Property { name: "color"; type: "QColor"; notify: "colorChanged"; index: 0 }
        Property { name: "radius"; type: "int"; isList: true; notify: "radiusChanged"; index: 1 }
        Signal { name: "colorChanged" }
        Signal { name: "radiusChanged" }
    }
    Component {
        file: "StarterImpl.h"
        name: "StarterImpl"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["FluentUI.impl/StarterImpl 1.0"]
        exportMetaObjectRevisions: [256]
        Signal {
            name: "handleDataChanged"
            Parameter { name: "args"; type: "QString" }
        }
        Method {
            name: "checkApplication"
            Parameter { name: "appId"; type: "QString" }
        }
        Method {
            name: "init"
            Parameter { name: "locale"; type: "QLocale" }
        }
        Method { name: "init"; isCloned: true }
    }
    Component {
        file: "SyntaxHighlighterImpl.h"
        name: "SyntaxHighlighterImpl"
        accessSemantics: "reference"
        prototype: "QSyntaxHighlighter"
        exports: ["FluentUI.impl/SyntaxHighlighterImpl 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "textDocument"
            type: "QQuickTextDocument"
            isPointer: true
            read: "textDocument"
            write: "setTextDocument"
            notify: "textDocumentChanged"
            index: 0
        }
        Signal { name: "textDocumentChanged" }
        Signal {
            name: "highlightBlockChanged"
            Parameter { name: "text"; type: "QVariant" }
        }
        Method {
            name: "setFormat"
            Parameter { name: "start"; type: "int" }
            Parameter { name: "count"; type: "int" }
            Parameter { name: "format"; type: "QVariant" }
        }
    }
    Component {
        file: "TabBackgroundImpl.h"
        name: "TabBackgroundImpl"
        accessSemantics: "reference"
        prototype: "QQuickPaintedItem"
        exports: ["FluentUI.impl/TabBackgroundImpl 1.0"]
        exportMetaObjectRevisions: [256]
        Property { name: "color"; type: "QColor"; notify: "colorChanged"; index: 0 }
        Property { name: "strokeColor"; type: "QColor"; notify: "strokeColorChanged"; index: 1 }
        Property { name: "radius"; type: "int"; notify: "radiusChanged"; index: 2 }
        Signal { name: "colorChanged" }
        Signal { name: "strokeColorChanged" }
        Signal { name: "radiusChanged" }
    }
    Component {
        file: "def.h"
        name: "TabViewType"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["FluentUI.impl/TabViewType 1.0"]
        exportMetaObjectRevisions: [256]
        Enum {
            name: "TabWidthBehaviors"
            alias: "TabWidthBehavior"
            isFlag: true
            values: ["Equal", "SizeToContent", "Compact"]
        }
        Enum {
            name: "CloseButtonVisibilitys"
            alias: "CloseButtonVisibility"
            isFlag: true
            values: ["Never", "Always", "OnHover"]
        }
    }
    Component {
        file: "TextCharFormat.h"
        name: "TextCharFormat"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["FluentUI.impl/TextCharFormat 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "font"
            type: "QFont"
            read: "font"
            write: "setFont"
            notify: "fontChanged"
            index: 0
        }
        Property {
            name: "foreground"
            type: "QVariant"
            read: "foreground"
            write: "setForeground"
            notify: "foregroundChanged"
            index: 1
        }
        Signal { name: "fontChanged" }
        Signal { name: "foregroundChanged" }
    }
    Component {
        file: "def.h"
        name: "TimePickerType"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["FluentUI.impl/TimePickerType 1.0"]
        exportMetaObjectRevisions: [256]
        Enum {
            name: "HourFormat"
            isFlag: true
            values: ["H", "HH"]
        }
    }
    Component {
        file: "Tools.h"
        name: "Tools"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["FluentUI.impl/Tools 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [256]
        Method {
            name: "withOpacity"
            type: "QColor"
            Parameter { type: "QColor" }
            Parameter { name: "alpha"; type: "double" }
        }
        Method { name: "isWindows11OrGreater"; type: "bool" }
        Method {
            name: "isUrl"
            type: "bool"
            Parameter { type: "QString" }
        }
        Method {
            name: "clipText"
            Parameter { name: "text"; type: "QString" }
        }
        Method {
            name: "deleteLater"
            Parameter { name: "p"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "readFile"
            type: "QString"
            Parameter { name: "fileName"; type: "QString" }
        }
        Method {
            name: "writeFile"
            type: "bool"
            Parameter { name: "fileName"; type: "QString" }
            Parameter { name: "content"; type: "QString" }
        }
        Method {
            name: "setOverrideCursor"
            Parameter { name: "shape"; type: "Qt::CursorShape" }
        }
        Method { name: "restoreOverrideCursor" }
        Method { name: "captureDesktop"; type: "QImage" }
        Method { name: "cursorScreenIndex"; type: "int" }
    }
    Component {
        file: "TourBackgroundImpl.h"
        name: "TourBackgroundImpl"
        accessSemantics: "reference"
        prototype: "QQuickPaintedItem"
        exports: ["FluentUI.impl/TourBackgroundImpl 1.0"]
        exportMetaObjectRevisions: [256]
        Property { name: "targetX"; type: "int"; notify: "targetXChanged"; index: 0 }
        Property { name: "targetY"; type: "int"; notify: "targetYChanged"; index: 1 }
        Property { name: "targetWidth"; type: "int"; notify: "targetWidthChanged"; index: 2 }
        Property { name: "targetHeight"; type: "int"; notify: "targetHeightChanged"; index: 3 }
        Property { name: "color"; type: "QColor"; notify: "colorChanged"; index: 4 }
        Signal { name: "targetXChanged" }
        Signal { name: "targetYChanged" }
        Signal { name: "targetWidthChanged" }
        Signal { name: "targetHeightChanged" }
        Signal { name: "colorChanged" }
    }
    Component {
        file: "TreeDataGridModel.h"
        name: "TreeDataGridModel"
        accessSemantics: "reference"
        prototype: "QAbstractListModel"
        exports: ["FluentUI.impl/TreeDataGridModel 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "count"
            type: "int"
            read: "count"
            notify: "countChanged"
            index: 0
            isReadonly: true
        }
        Property {
            name: "sourceData"
            type: "QVariant"
            isList: true
            notify: "sourceDataChanged"
            index: 1
        }
        Property {
            name: "displayData"
            type: "QSharedPointer<TreeNode>"
            isList: true
            read: "displayData"
            notify: "displayDataChanged"
            index: 2
            isReadonly: true
            isFinal: true
        }
        Signal { name: "sourceDataChanged" }
        Signal { name: "displayDataChanged" }
        Signal { name: "countChanged" }
        Method { name: "clear" }
        Method {
            name: "get"
            type: "QVariant"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "collapse"
            Parameter { name: "rowIndex"; type: "int" }
        }
        Method {
            name: "expand"
            Parameter { name: "rowIndex"; type: "int" }
        }
        Method {
            name: "selectRange"
            Parameter { name: "selectionModel"; type: "QItemSelectionModel"; isPointer: true }
            Parameter { name: "startRow"; type: "int" }
            Parameter { name: "endRow"; type: "int" }
        }
    }
    Component {
        file: "WatermarkImpl.h"
        name: "WatermarkImpl"
        accessSemantics: "reference"
        prototype: "QQuickPaintedItem"
        exports: ["FluentUI.impl/WatermarkImpl 1.0"]
        exportMetaObjectRevisions: [256]
        Property { name: "text"; type: "QString"; notify: "textChanged"; index: 0 }
        Property { name: "gap"; type: "QPoint"; notify: "gapChanged"; index: 1 }
        Property { name: "offset"; type: "QPoint"; notify: "offsetChanged"; index: 2 }
        Property { name: "textColor"; type: "QColor"; notify: "textColorChanged"; index: 3 }
        Property { name: "rotate"; type: "int"; notify: "rotateChanged"; index: 4 }
        Property { name: "textSize"; type: "int"; notify: "textSizeChanged"; index: 5 }
        Signal { name: "textChanged" }
        Signal { name: "gapChanged" }
        Signal { name: "offsetChanged" }
        Signal { name: "textColorChanged" }
        Signal { name: "rotateChanged" }
        Signal { name: "textSizeChanged" }
    }
    Component {
        file: "def.h"
        name: "WindowEffectType"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["FluentUI.impl/WindowEffectType 1.0"]
        exportMetaObjectRevisions: [256]
        Enum {
            name: "EffectModes"
            alias: "EffectMode"
            isFlag: true
            values: ["Normal", "Mica", "Acrylic"]
        }
    }
    Component {
        file: "def.h"
        name: "WindowType"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["FluentUI.impl/WindowType 1.0"]
        exportMetaObjectRevisions: [256]
        Enum {
            name: "LaunchModes"
            alias: "LaunchMode"
            isFlag: true
            values: ["Standard", "SingleTask", "SingleInstance"]
        }
    }
}
